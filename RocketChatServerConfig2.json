{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Rocket Chat Server to be Created for each company",
  "Parameters": {
    "hubotScriptS3URL": {
      "Type": "String",
      "Description": "The URL of the Hubot script in Amazon S3. This URL should be of the following form:  https://{bucket-name}.s3.amazonaws.com/{path-to-script}"
    },
    "MongoURL": {
      "Type": "String",
      "Description": "The URL of the mongo database to be used for rocketchat"
    },
    "CompanyName": {
      "Type": "String",
      "Description": "The name of the company for whom the rocketChat server is being created"
    },
    "KeyName": {
      "Description": "The keypair used to shell into the EC2 instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "InstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.small",
        "t2.medium"
      ],
      "ConstraintDescription": "These are the allowed server sizes -> change these later if necessary"
    },
    "HostedZone": {
      "Type": "String",
      "Description": "The DNS name of an existing Amazon Route 53 hosted zone"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "SecurityGroup": {
      "Description": "The name of the AWS security group for the new EC2 instance",
      "Type": "AWS::EC2::SecurityGroup::GroupName"
    },
    "BaseURL": {
      "Type": "String",
      "Description": "The base URL to be used for commands"
    },
    "ApacheConfigURL": {
      "Type": "String",
      "Description": "The URL of the Apache SSL configuration file in AWS S3."
    },
    "bucketName": {
      "Type": "String",
      "Description": "The name of the S3 bucket for file storage for each company."
    },
    "fullRocketChatURL": {
      "Type": "String",
      "Description": "The full URL at which the client can access rocketchat"
    },
    "Region": {
      "Type": "String",
      "Description": "The AWS region in which the resources are to be created"
    },
    "companyDBHost": {
      "Type": "String",
      "Description": "The host name of the company database"
    },
    "companyDBUserName": {
      "Type": "String",
      "Description": "The user name used to log in to the company database"
    },
    "companyDBPassword": {
      "Type": "String",
      "Description": "The password used to log in to the company database"
    },
    "companyDBName": {
      "Type": "String",
      "Description": "The name of the company database"
    },
    "botPassword": {
      "Type": "String",
      "Description": "The password used by the bot to log in to the RocketChat Server"
    },
    "javaHostName": {
      "Type": "String",
      "Description": "The host name of the Java Comprehend Service used to answer questions in RocketChat"
    },
    "javaPort": {
      "Type": "Number",
      "Description": "The port number of the Java Comprehend Service used to answer questions in RocketChat"
    },
    "roleName": {
      "Type": "String",
      "Description": "The name of the AWS role that should be assigned to each new EC2 instance. This role should have full access to S3, and should have run bot permission for Lex"
    }
  },
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      }
    },
    "AWSInstanceType2NATArch": {
      "t2.micro": {
        "Arch": "NATHVM64"
      },
      "t2.small": {
        "Arch": "NATHVM64"
      },
      "t2.medium": {
        "Arch": "NATHVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "us-east-1": {
        "HVM64": "ami-a4dc46db"
      },
      "us-east-2": {
        "HVM64": "ami-5e8bb23b"
      }
    }
  },
  "Resources": {
    "RegionRecord": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "HostedZone"
              },
              "."
            ]
          ]
        },
        "Comment": "DNS name for my instance.",
        "Name": {
          "Fn::Join": [
            "",
            [
              "chat-",
              {
                "Ref": "CompanyName"
              },
              ".",
              {
                "Ref": "HostedZone"
              },
              "."
            ]
          ]
        },
        "Type": "A",
        "TTL": "900",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "RocketChatServer",
              "PublicIp"
            ]
          }
        ]
      }
    },
    "RocketChatServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
            },
            "groups": {
            },
            "users": {
            },
            "sources": {
            },
            "files": {
            },
            "commands": {
            },
            "services": {
            }
          }
        }
      },
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "roleName"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "cd /home/ubuntu\n",
                "sudo apt-get update\n",
                "sudo apt-get -y upgrade\n",
                "curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\n",
                "sudo apt-get install -y nodejs\n",
                "sudo apt-get install -y build-essential\n",
                "sudo mkdir /home/ubuntu/ZERO\n",

                "sudo curl -L https://releases.rocket.chat/latest/download -o rocket.chat.tgz\n",
                "sudo tar zxf rocket.chat.tgz\n",
                "sudo mv bundle Rocket.Chat\n",
                "cd Rocket.Chat/programs/server\n",
                "sudo npm install\n",
                "cd ../..\n",
                "sudo -i\n",
                "echo ROOT_URL=https://chat-", {"Ref": "CompanyName"}, ".", {"Ref": "HostedZone"}, ">> /etc/environment\n",
                "echo MONGO_URL=", {"Ref": "MongoURL"}, " >> /etc/environment\n",
                "echo PORT=3000 >> /etc/environment\n",
                "cd /home/ubuntu/Rocket.Chat\n",
                "export ROOT_URL=https://chat-", {"Ref": "CompanyName"}, ".", {"Ref": "HostedZone"}, "\n",
                "export MONGO_URL=", {"Ref": "MongoURL"}, "\n",
                "export PORT=3000\n",
                "sudo mkdir /home/ubuntu/ONE\n",

                "cd /home/ubuntu/Rocket.Chat\n",
                "mkdir -p Hubot/scripts/node_modules\n",
                "cd /home/ubuntu/Rocket.Chat/Hubot/scripts/node_modules\n",
                "npm install aws-sdk\n",
                "cd ..\n",
                "wget ", {"Ref": "hubotScriptS3URL"}, "\n",
                "sudo sed -i -e \"s/DBHOST/", {"Ref": "companyDBHost"}, "/g\" HubotScriptNEW.js\n",
                "sudo mkdir /home/ubuntu/A\n",
                "sudo sed -i -e \"s/DBUSERNAME/", {"Ref": "companyDBUserName"}, "/g\" HubotScriptNEW.js\n",
                "sudo mkdir /home/ubuntu/B\n",
                "sudo sed -i -e \"s/DBPASSWORD/", {"Ref": "companyDBPassword"}, "/g\" HubotScriptNEW.js\n",
                "sudo mkdir /home/ubuntu/C\n",
                "sudo sed -i -e \"s/DBNAME/", {"Ref": "companyDBName"}, "/g\" HubotScriptNEW.js\n",
                "sudo mkdir /home/ubuntu/D\n",
                "sudo sed -i -e \"s/JAVAHOSTNAME/", {"Ref": "javaHostName"}, "/g\" HubotScriptNEW.js\n",
                "sudo mkdir /home/ubuntu/E\n",
                "sudo sed -i -e \"s/123456789/", {"Ref": "javaPort"}, "/g\" HubotScriptNEW.js\n",
                "sudo mkdir /home/ubuntu/TEXTREPLACED\n",
                "sudo mkdir /home/ubuntu/TWO\n",

                "sudo apt-get update\n",
                "sudo apt-get install apt-transport-https ca-certificates curl software-properties-common\n",
                "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n",
                "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n",
                "sudo apt-get update\n",
                "sudo apt-get install -y docker-ce\n",
                "sudo mkdir /home/ubuntu/THREE\n",

                "cd /\n",
                "sudo apt-get update\n",
                "sudo apt-get install -y apache2\n",
                "sudo a2enmod proxy_http\n",
                "sudo a2enmod proxy\n",
                "sudo a2enmod ssl\n",
                "sudo a2enmod proxy_wstunnel\n",
                "sudo a2enmod rewrite\n",
                "sudo add-apt-repository -y ppa:certbot/certbot\n",
                "sudo mkdir /home/ubuntu/FOUR\n",

                "sudo apt-get update\n",
                "sudo apt-get install -y python-certbot-apache\n",
                "sudo certbot -n --agree-tos --redirect --apache --email luke@sublimeapp.com -d ", {"Ref": "BaseURL"}, "\n",
                "cd /etc/apache2/sites-enabled\n",
                "sudo rm -f 000-default-le-ssl.conf\n",
                "sudo wget ", {"Ref": "ApacheConfigURL"}, "\n",
                "sudo sed -i \"s/chat-companya.aboutus123.com/", {"Ref": "BaseURL"}, "/g\" rocketChat.conf\n",
                "sudo service apache2 restart\n",
                "sudo mkdir /home/ubuntu/FIVE\n",

                "sudo adduser --disabled-password --gecos \"RocketChat, none, none, none, none\" rocket-chat\n",
                "sudo npm install -g -y pm2\n",
                "cd /home/ubuntu/Rocket.Chat\n",
                "sudo -H -u rocket-chat bash -c \"pm2 start main.js\"\n",
                "sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u rocket-chat --hp /home/rocket-chat\n",
                "sudo mkdir /home/ubuntu/SIX\n",

                "sudo docker run --restart always -d -it -e ROCKETCHAT_URL=https://", {"Ref": "BaseURL"}, " -e ROCKETCHAT_ROOM=\"\" -e RESPOND_TO_DM=true -e LISTEN_ON_ALL_PUBLIC=true -e ROCKETCHAT_USER=FastChat -e ROCKETCHAT_PASSWORD=", {"Ref": "botPassword"}, " -e BOT_NAME=FastChat -v /home/ubuntu/Rocket.Chat/Hubot/scripts:/home/hubot/scripts rocketchat/hubot-rocketchat\n",
                "sudo mkdir /home/ubuntu/ALLCMDSDONE\n"
              ]
            ]
          }
        }
      }
    },
    "RocketChatBucket": {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "AccessControl" : "Private",
        "BucketName" : {"Ref":"bucketName"},
        "CorsConfiguration" : {
          "CorsRules": [
            {
              "AllowedHeaders": ["*"],
              "AllowedMethods": ["GET", "PUT", "POST", "HEAD"],
              "AllowedOrigins": [{"Ref":"fullRocketChatURL"}],
              "MaxAge": 3000
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "InstanceId": {
      "Description": "InstanceId of the newly created EC2 instance",
      "Value": {
        "Ref": "RocketChatServer"
      }
    },
    "AZ": {
      "Description": "Availability Zone of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "RocketChatServer",
          "AvailabilityZone"
        ]
      }
    },
    "PublicDNS": {
      "Description": "Public DNSName of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "RocketChatServer",
          "PublicDnsName"
        ]
      }
    },
    "PublicIP": {
      "Description": "Public IP address of the newly created EC2 instance",
      "Value": {
        "Fn::GetAtt": [
          "RocketChatServer",
          "PublicIp"
        ]
      }
    }
  }
}